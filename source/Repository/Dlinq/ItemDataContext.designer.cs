#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.21006.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AtomSite.Repository.Dlinq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Syndication")]
	public partial class ItemDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAttribute(Attribute instance);
    partial void UpdateAttribute(Attribute instance);
    partial void DeleteAttribute(Attribute instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertContent(Content instance);
    partial void UpdateContent(Content instance);
    partial void DeleteContent(Content instance);
    partial void InsertElement(Element instance);
    partial void UpdateElement(Element instance);
    partial void DeleteElement(Element instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertLink(Link instance);
    partial void UpdateLink(Link instance);
    partial void DeleteLink(Link instance);
    #endregion
		
		public ItemDataContext() : 
				base(global::AtomSite.Repository.Properties.Settings.Default.SyndicationConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public ItemDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ItemDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ItemDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ItemDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Attribute> Attributes
		{
			get
			{
				return this.GetTable<Attribute>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Content> Contents
		{
			get
			{
				return this.GetTable<Content>();
			}
		}
		
		public System.Data.Linq.Table<Element> Elements
		{
			get
			{
				return this.GetTable<Element>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<Link> Links
		{
			get
			{
				return this.GetTable<Link>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attribute")]
	public partial class Attribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttributeKey;
		
		private int _ParentKey;
		
		private string _Name;
		
		private string _Namespace;
		
		private string _Value;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Content> _Content;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Link> _Link;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttributeKeyChanging(int value);
    partial void OnAttributeKeyChanged();
    partial void OnParentKeyChanging(int value);
    partial void OnParentKeyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNamespaceChanging(string value);
    partial void OnNamespaceChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Attribute()
		{
			this._Person = default(EntityRef<Person>);
			this._Category = default(EntityRef<Category>);
			this._Content = default(EntityRef<Content>);
			this._Item = default(EntityRef<Item>);
			this._Link = default(EntityRef<Link>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttributeKey
		{
			get
			{
				return this._AttributeKey;
			}
			set
			{
				if ((this._AttributeKey != value))
				{
					this.OnAttributeKeyChanging(value);
					this.SendPropertyChanging();
					this._AttributeKey = value;
					this.SendPropertyChanged("AttributeKey");
					this.OnAttributeKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentKey", DbType="Int NOT NULL")]
		public int ParentKey
		{
			get
			{
				return this._ParentKey;
			}
			set
			{
				if ((this._ParentKey != value))
				{
					if (((((this._Person.HasLoadedOrAssignedValue || this._Category.HasLoadedOrAssignedValue) 
								|| this._Content.HasLoadedOrAssignedValue) 
								|| this._Item.HasLoadedOrAssignedValue) 
								|| this._Link.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentKeyChanging(value);
					this.SendPropertyChanging();
					this._ParentKey = value;
					this.SendPropertyChanged("ParentKey");
					this.OnParentKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Namespace", DbType="NVarChar(512)")]
		public string Namespace
		{
			get
			{
				return this._Namespace;
			}
			set
			{
				if ((this._Namespace != value))
				{
					this.OnNamespaceChanging(value);
					this.SendPropertyChanging();
					this._Namespace = value;
					this.SendPropertyChanged("Namespace");
					this.OnNamespaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Attribute", Storage="_Person", ThisKey="ParentKey", OtherKey="PersonKey", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Attributes.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Attributes.Add(this);
						this._ParentKey = value.PersonKey;
					}
					else
					{
						this._ParentKey = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Attribute", Storage="_Category", ThisKey="ParentKey", OtherKey="CategoryKey", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Attributes.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Attributes.Add(this);
						this._ParentKey = value.CategoryKey;
					}
					else
					{
						this._ParentKey = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Content_Attribute", Storage="_Content", ThisKey="ParentKey", OtherKey="ContentKey", IsForeignKey=true)]
		public Content Content
		{
			get
			{
				return this._Content.Entity;
			}
			set
			{
				Content previousValue = this._Content.Entity;
				if (((previousValue != value) 
							|| (this._Content.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Content.Entity = null;
						previousValue.Attributes.Remove(this);
					}
					this._Content.Entity = value;
					if ((value != null))
					{
						value.Attributes.Add(this);
						this._ParentKey = value.ContentKey;
					}
					else
					{
						this._ParentKey = default(int);
					}
					this.SendPropertyChanged("Content");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Attribute", Storage="_Item", ThisKey="ParentKey", OtherKey="ItemKey", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Attributes.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Attributes.Add(this);
						this._ParentKey = value.ItemKey;
					}
					else
					{
						this._ParentKey = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_Attribute", Storage="_Link", ThisKey="ParentKey", OtherKey="LinkKey", IsForeignKey=true)]
		public Link Link
		{
			get
			{
				return this._Link.Entity;
			}
			set
			{
				Link previousValue = this._Link.Entity;
				if (((previousValue != value) 
							|| (this._Link.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Link.Entity = null;
						previousValue.Attributes.Remove(this);
					}
					this._Link.Entity = value;
					if ((value != null))
					{
						value.Attributes.Add(this);
						this._ParentKey = value.LinkKey;
					}
					else
					{
						this._ParentKey = default(int);
					}
					this.SendPropertyChanged("Link");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonKey;
		
		private int _ParentKey;
		
		private string _Name;
		
		private string _Uri;
		
		private string _Email;
		
		private string _Type;
		
		private EntitySet<Attribute> _Attributes;
		
		private EntitySet<Element> _Elements;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonKeyChanging(int value);
    partial void OnPersonKeyChanged();
    partial void OnParentKeyChanging(int value);
    partial void OnParentKeyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUriChanging(string value);
    partial void OnUriChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Person()
		{
			this._Attributes = new EntitySet<Attribute>(new Action<Attribute>(this.attach_Attributes), new Action<Attribute>(this.detach_Attributes));
			this._Elements = new EntitySet<Element>(new Action<Element>(this.attach_Elements), new Action<Element>(this.detach_Elements));
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PersonKey
		{
			get
			{
				return this._PersonKey;
			}
			set
			{
				if ((this._PersonKey != value))
				{
					this.OnPersonKeyChanging(value);
					this.SendPropertyChanging();
					this._PersonKey = value;
					this.SendPropertyChanged("PersonKey");
					this.OnPersonKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentKey", DbType="Int NOT NULL")]
		public int ParentKey
		{
			get
			{
				return this._ParentKey;
			}
			set
			{
				if ((this._ParentKey != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentKeyChanging(value);
					this.SendPropertyChanging();
					this._ParentKey = value;
					this.SendPropertyChanged("ParentKey");
					this.OnParentKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uri", DbType="NVarChar(512)")]
		public string Uri
		{
			get
			{
				return this._Uri;
			}
			set
			{
				if ((this._Uri != value))
				{
					this.OnUriChanging(value);
					this.SendPropertyChanging();
					this._Uri = value;
					this.SendPropertyChanged("Uri");
					this.OnUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(12)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Attribute", Storage="_Attributes", ThisKey="PersonKey", OtherKey="ParentKey")]
		public EntitySet<Attribute> Attributes
		{
			get
			{
				return this._Attributes;
			}
			set
			{
				this._Attributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Element", Storage="_Elements", ThisKey="PersonKey", OtherKey="ParentKey")]
		public EntitySet<Element> Elements
		{
			get
			{
				return this._Elements;
			}
			set
			{
				this._Elements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Person", Storage="_Item", ThisKey="ParentKey", OtherKey="ItemKey", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._ParentKey = value.ItemKey;
					}
					else
					{
						this._ParentKey = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Elements(Element entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Elements(Element entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryKey;
		
		private int _ParentKey;
		
		private string _Name;
		
		private string _Label;
		
		private string _Scheme;
		
		private EntitySet<Attribute> _Attributes;
		
		private EntitySet<Element> _Elements;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryKeyChanging(int value);
    partial void OnCategoryKeyChanged();
    partial void OnParentKeyChanging(int value);
    partial void OnParentKeyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnSchemeChanging(string value);
    partial void OnSchemeChanged();
    #endregion
		
		public Category()
		{
			this._Attributes = new EntitySet<Attribute>(new Action<Attribute>(this.attach_Attributes), new Action<Attribute>(this.detach_Attributes));
			this._Elements = new EntitySet<Element>(new Action<Element>(this.attach_Elements), new Action<Element>(this.detach_Elements));
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryKey
		{
			get
			{
				return this._CategoryKey;
			}
			set
			{
				if ((this._CategoryKey != value))
				{
					this.OnCategoryKeyChanging(value);
					this.SendPropertyChanging();
					this._CategoryKey = value;
					this.SendPropertyChanged("CategoryKey");
					this.OnCategoryKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentKey", DbType="Int NOT NULL")]
		public int ParentKey
		{
			get
			{
				return this._ParentKey;
			}
			set
			{
				if ((this._ParentKey != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentKeyChanging(value);
					this.SendPropertyChanging();
					this._ParentKey = value;
					this.SendPropertyChanged("ParentKey");
					this.OnParentKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="NVarChar(256)")]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scheme", DbType="NVarChar(512)")]
		public string Scheme
		{
			get
			{
				return this._Scheme;
			}
			set
			{
				if ((this._Scheme != value))
				{
					this.OnSchemeChanging(value);
					this.SendPropertyChanging();
					this._Scheme = value;
					this.SendPropertyChanged("Scheme");
					this.OnSchemeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Attribute", Storage="_Attributes", ThisKey="CategoryKey", OtherKey="ParentKey")]
		public EntitySet<Attribute> Attributes
		{
			get
			{
				return this._Attributes;
			}
			set
			{
				this._Attributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Element", Storage="_Elements", ThisKey="CategoryKey", OtherKey="ParentKey")]
		public EntitySet<Element> Elements
		{
			get
			{
				return this._Elements;
			}
			set
			{
				this._Elements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Category", Storage="_Item", ThisKey="ParentKey", OtherKey="ItemKey", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._ParentKey = value.ItemKey;
					}
					else
					{
						this._ParentKey = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_Elements(Element entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Elements(Element entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Content")]
	public partial class Content : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContentKey;
		
		private string _Type;
		
		private string _Url;
		
		private string _Text;
		
		private EntitySet<Attribute> _Attributes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContentKeyChanging(int value);
    partial void OnContentKeyChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Content()
		{
			this._Attributes = new EntitySet<Attribute>(new Action<Attribute>(this.attach_Attributes), new Action<Attribute>(this.detach_Attributes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContentKey
		{
			get
			{
				return this._ContentKey;
			}
			set
			{
				if ((this._ContentKey != value))
				{
					this.OnContentKeyChanging(value);
					this.SendPropertyChanging();
					this._ContentKey = value;
					this.SendPropertyChanged("ContentKey");
					this.OnContentKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(512)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Content_Attribute", Storage="_Attributes", ThisKey="ContentKey", OtherKey="ParentKey")]
		public EntitySet<Attribute> Attributes
		{
			get
			{
				return this._Attributes;
			}
			set
			{
				this._Attributes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.Content = this;
		}
		
		private void detach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.Content = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Element")]
	public partial class Element : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ElementKey;
		
		private int _ParentKey;
		
		private string _OuterName;
		
		private string _OuterNamespace;
		
		private string _Xml;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Link> _Link;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnElementKeyChanging(int value);
    partial void OnElementKeyChanged();
    partial void OnParentKeyChanging(int value);
    partial void OnParentKeyChanged();
    partial void OnOuterNameChanging(string value);
    partial void OnOuterNameChanged();
    partial void OnOuterNamespaceChanging(string value);
    partial void OnOuterNamespaceChanged();
    partial void OnXmlChanging(string value);
    partial void OnXmlChanged();
    #endregion
		
		public Element()
		{
			this._Category = default(EntityRef<Category>);
			this._Person = default(EntityRef<Person>);
			this._Item = default(EntityRef<Item>);
			this._Link = default(EntityRef<Link>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElementKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ElementKey
		{
			get
			{
				return this._ElementKey;
			}
			set
			{
				if ((this._ElementKey != value))
				{
					this.OnElementKeyChanging(value);
					this.SendPropertyChanging();
					this._ElementKey = value;
					this.SendPropertyChanged("ElementKey");
					this.OnElementKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentKey", DbType="Int NOT NULL")]
		public int ParentKey
		{
			get
			{
				return this._ParentKey;
			}
			set
			{
				if ((this._ParentKey != value))
				{
					if ((((this._Category.HasLoadedOrAssignedValue || this._Person.HasLoadedOrAssignedValue) 
								|| this._Item.HasLoadedOrAssignedValue) 
								|| this._Link.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentKeyChanging(value);
					this.SendPropertyChanging();
					this._ParentKey = value;
					this.SendPropertyChanged("ParentKey");
					this.OnParentKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OuterName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string OuterName
		{
			get
			{
				return this._OuterName;
			}
			set
			{
				if ((this._OuterName != value))
				{
					this.OnOuterNameChanging(value);
					this.SendPropertyChanging();
					this._OuterName = value;
					this.SendPropertyChanged("OuterName");
					this.OnOuterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OuterNamespace", DbType="NVarChar(512)")]
		public string OuterNamespace
		{
			get
			{
				return this._OuterNamespace;
			}
			set
			{
				if ((this._OuterNamespace != value))
				{
					this.OnOuterNamespaceChanging(value);
					this.SendPropertyChanging();
					this._OuterNamespace = value;
					this.SendPropertyChanged("OuterNamespace");
					this.OnOuterNamespaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Xml", DbType="NVarChar(MAX)")]
		public string Xml
		{
			get
			{
				return this._Xml;
			}
			set
			{
				if ((this._Xml != value))
				{
					this.OnXmlChanging(value);
					this.SendPropertyChanging();
					this._Xml = value;
					this.SendPropertyChanged("Xml");
					this.OnXmlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Element", Storage="_Category", ThisKey="ParentKey", OtherKey="CategoryKey", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Elements.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Elements.Add(this);
						this._ParentKey = value.CategoryKey;
					}
					else
					{
						this._ParentKey = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Element", Storage="_Person", ThisKey="ParentKey", OtherKey="PersonKey", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Elements.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Elements.Add(this);
						this._ParentKey = value.PersonKey;
					}
					else
					{
						this._ParentKey = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Element", Storage="_Item", ThisKey="ParentKey", OtherKey="ItemKey", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Elements.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Elements.Add(this);
						this._ParentKey = value.ItemKey;
					}
					else
					{
						this._ParentKey = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_Element", Storage="_Link", ThisKey="ParentKey", OtherKey="LinkKey", IsForeignKey=true)]
		public Link Link
		{
			get
			{
				return this._Link.Entity;
			}
			set
			{
				Link previousValue = this._Link.Entity;
				if (((previousValue != value) 
							|| (this._Link.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Link.Entity = null;
						previousValue.Elements.Remove(this);
					}
					this._Link.Entity = value;
					if ((value != null))
					{
						value.Elements.Add(this);
						this._ParentKey = value.LinkKey;
					}
					else
					{
						this._ParentKey = default(int);
					}
					this.SendPropertyChanged("Link");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemKey;
		
		private string _Id;
		
		private int _TitleKey;
		
		private string _BaseUri;
		
		private System.DateTime _LastUpdatedTime;
		
		private System.Nullable<System.DateTime> _PublishDate;
		
		private System.Nullable<int> _SummaryKey;
		
		private System.Nullable<int> _CopyrightKey;
		
		private System.Nullable<int> _ContentKey;
		
		private EntitySet<Attribute> _Attributes;
		
		private EntitySet<Person> _Persons;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<Element> _Elements;
		
		private EntitySet<Link> _Links;
		
		private EntityRef<Content> _Content;
		
		private EntityRef<Content> _Copyright;
		
		private EntityRef<Content> _Summary;
		
		private EntityRef<Content> _Title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemKeyChanging(int value);
    partial void OnItemKeyChanged();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnTitleKeyChanging(int value);
    partial void OnTitleKeyChanged();
    partial void OnBaseUriChanging(string value);
    partial void OnBaseUriChanged();
    partial void OnLastUpdatedTimeChanging(System.DateTime value);
    partial void OnLastUpdatedTimeChanged();
    partial void OnPublishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishDateChanged();
    partial void OnSummaryKeyChanging(System.Nullable<int> value);
    partial void OnSummaryKeyChanged();
    partial void OnCopyrightKeyChanging(System.Nullable<int> value);
    partial void OnCopyrightKeyChanged();
    partial void OnContentKeyChanging(System.Nullable<int> value);
    partial void OnContentKeyChanged();
    #endregion
		
		public Item()
		{
			this._Attributes = new EntitySet<Attribute>(new Action<Attribute>(this.attach_Attributes), new Action<Attribute>(this.detach_Attributes));
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Elements = new EntitySet<Element>(new Action<Element>(this.attach_Elements), new Action<Element>(this.detach_Elements));
			this._Links = new EntitySet<Link>(new Action<Link>(this.attach_Links), new Action<Link>(this.detach_Links));
			this._Content = default(EntityRef<Content>);
			this._Copyright = default(EntityRef<Content>);
			this._Summary = default(EntityRef<Content>);
			this._Title = default(EntityRef<Content>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemKey
		{
			get
			{
				return this._ItemKey;
			}
			set
			{
				if ((this._ItemKey != value))
				{
					this.OnItemKeyChanging(value);
					this.SendPropertyChanging();
					this._ItemKey = value;
					this.SendPropertyChanged("ItemKey");
					this.OnItemKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleKey", DbType="Int NOT NULL")]
		public int TitleKey
		{
			get
			{
				return this._TitleKey;
			}
			set
			{
				if ((this._TitleKey != value))
				{
					if (this._Title.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTitleKeyChanging(value);
					this.SendPropertyChanging();
					this._TitleKey = value;
					this.SendPropertyChanged("TitleKey");
					this.OnTitleKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUri", DbType="NVarChar(256)")]
		public string BaseUri
		{
			get
			{
				return this._BaseUri;
			}
			set
			{
				if ((this._BaseUri != value))
				{
					this.OnBaseUriChanging(value);
					this.SendPropertyChanging();
					this._BaseUri = value;
					this.SendPropertyChanged("BaseUri");
					this.OnBaseUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedTime
		{
			get
			{
				return this._LastUpdatedTime;
			}
			set
			{
				if ((this._LastUpdatedTime != value))
				{
					this.OnLastUpdatedTimeChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedTime = value;
					this.SendPropertyChanged("LastUpdatedTime");
					this.OnLastUpdatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SummaryKey", DbType="Int")]
		public System.Nullable<int> SummaryKey
		{
			get
			{
				return this._SummaryKey;
			}
			set
			{
				if ((this._SummaryKey != value))
				{
					if (this._Summary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSummaryKeyChanging(value);
					this.SendPropertyChanging();
					this._SummaryKey = value;
					this.SendPropertyChanged("SummaryKey");
					this.OnSummaryKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CopyrightKey", DbType="Int")]
		public System.Nullable<int> CopyrightKey
		{
			get
			{
				return this._CopyrightKey;
			}
			set
			{
				if ((this._CopyrightKey != value))
				{
					if (this._Copyright.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCopyrightKeyChanging(value);
					this.SendPropertyChanging();
					this._CopyrightKey = value;
					this.SendPropertyChanged("CopyrightKey");
					this.OnCopyrightKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentKey", DbType="Int")]
		public System.Nullable<int> ContentKey
		{
			get
			{
				return this._ContentKey;
			}
			set
			{
				if ((this._ContentKey != value))
				{
					if (this._Content.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentKeyChanging(value);
					this.SendPropertyChanging();
					this._ContentKey = value;
					this.SendPropertyChanged("ContentKey");
					this.OnContentKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Attribute", Storage="_Attributes", ThisKey="ItemKey", OtherKey="ParentKey")]
		public EntitySet<Attribute> Attributes
		{
			get
			{
				return this._Attributes;
			}
			set
			{
				this._Attributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Person", Storage="_Persons", ThisKey="ItemKey", OtherKey="ParentKey")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Category", Storage="_Categories", ThisKey="ItemKey", OtherKey="ParentKey")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Element", Storage="_Elements", ThisKey="ItemKey", OtherKey="ParentKey")]
		public EntitySet<Element> Elements
		{
			get
			{
				return this._Elements;
			}
			set
			{
				this._Elements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Link", Storage="_Links", ThisKey="ItemKey", OtherKey="ParentKey")]
		public EntitySet<Link> Links
		{
			get
			{
				return this._Links;
			}
			set
			{
				this._Links.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Content_Item", Storage="_Content", ThisKey="ContentKey", OtherKey="ContentKey", IsForeignKey=true)]
		public Content Content
		{
			get
			{
				return this._Content.Entity;
			}
			set
			{
				if ((this._Content.Entity != value))
				{
					this.SendPropertyChanging();
					this._Content.Entity = value;
					this.SendPropertyChanged("Content");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Content_Item1", Storage="_Copyright", ThisKey="CopyrightKey", OtherKey="ContentKey", IsForeignKey=true)]
		public Content Copyright
		{
			get
			{
				return this._Copyright.Entity;
			}
			set
			{
				if ((this._Copyright.Entity != value))
				{
					this.SendPropertyChanging();
					this._Copyright.Entity = value;
					this.SendPropertyChanged("Copyright");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Content_Item2", Storage="_Summary", ThisKey="SummaryKey", OtherKey="ContentKey", IsForeignKey=true)]
		public Content Summary
		{
			get
			{
				return this._Summary.Entity;
			}
			set
			{
				if ((this._Summary.Entity != value))
				{
					this.SendPropertyChanging();
					this._Summary.Entity = value;
					this.SendPropertyChanged("Summary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Content_Item3", Storage="_Title", ThisKey="TitleKey", OtherKey="ContentKey", IsForeignKey=true)]
		public Content Title
		{
			get
			{
				return this._Title.Entity;
			}
			set
			{
				if ((this._Title.Entity != value))
				{
					this.SendPropertyChanging();
					this._Title.Entity = value;
					this.SendPropertyChanged("Title");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Elements(Element entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Elements(Element entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Links(Link entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Links(Link entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Link")]
	public partial class Link : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LinkKey;
		
		private int _ParentKey;
		
		private string _BaseUri;
		
		private string _Uri;
		
		private System.Nullable<int> _Length;
		
		private string _MediaType;
		
		private string _RelationshipType;
		
		private string _Title;
		
		private EntitySet<Attribute> _Attributes;
		
		private EntitySet<Element> _Elements;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLinkKeyChanging(int value);
    partial void OnLinkKeyChanged();
    partial void OnParentKeyChanging(int value);
    partial void OnParentKeyChanged();
    partial void OnBaseUriChanging(string value);
    partial void OnBaseUriChanged();
    partial void OnUriChanging(string value);
    partial void OnUriChanged();
    partial void OnLengthChanging(System.Nullable<int> value);
    partial void OnLengthChanged();
    partial void OnMediaTypeChanging(string value);
    partial void OnMediaTypeChanged();
    partial void OnRelationshipTypeChanging(string value);
    partial void OnRelationshipTypeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Link()
		{
			this._Attributes = new EntitySet<Attribute>(new Action<Attribute>(this.attach_Attributes), new Action<Attribute>(this.detach_Attributes));
			this._Elements = new EntitySet<Element>(new Action<Element>(this.attach_Elements), new Action<Element>(this.detach_Elements));
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LinkKey
		{
			get
			{
				return this._LinkKey;
			}
			set
			{
				if ((this._LinkKey != value))
				{
					this.OnLinkKeyChanging(value);
					this.SendPropertyChanging();
					this._LinkKey = value;
					this.SendPropertyChanged("LinkKey");
					this.OnLinkKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentKey", DbType="Int NOT NULL")]
		public int ParentKey
		{
			get
			{
				return this._ParentKey;
			}
			set
			{
				if ((this._ParentKey != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentKeyChanging(value);
					this.SendPropertyChanging();
					this._ParentKey = value;
					this.SendPropertyChanged("ParentKey");
					this.OnParentKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUri", DbType="NVarChar(256)")]
		public string BaseUri
		{
			get
			{
				return this._BaseUri;
			}
			set
			{
				if ((this._BaseUri != value))
				{
					this.OnBaseUriChanging(value);
					this.SendPropertyChanging();
					this._BaseUri = value;
					this.SendPropertyChanged("BaseUri");
					this.OnBaseUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uri", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string Uri
		{
			get
			{
				return this._Uri;
			}
			set
			{
				if ((this._Uri != value))
				{
					this.OnUriChanging(value);
					this.SendPropertyChanging();
					this._Uri = value;
					this.SendPropertyChanged("Uri");
					this.OnUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Int")]
		public System.Nullable<int> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaType", DbType="NVarChar(50)")]
		public string MediaType
		{
			get
			{
				return this._MediaType;
			}
			set
			{
				if ((this._MediaType != value))
				{
					this.OnMediaTypeChanging(value);
					this.SendPropertyChanging();
					this._MediaType = value;
					this.SendPropertyChanged("MediaType");
					this.OnMediaTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipType", DbType="NVarChar(50)")]
		public string RelationshipType
		{
			get
			{
				return this._RelationshipType;
			}
			set
			{
				if ((this._RelationshipType != value))
				{
					this.OnRelationshipTypeChanging(value);
					this.SendPropertyChanging();
					this._RelationshipType = value;
					this.SendPropertyChanged("RelationshipType");
					this.OnRelationshipTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(512)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_Attribute", Storage="_Attributes", ThisKey="LinkKey", OtherKey="ParentKey")]
		public EntitySet<Attribute> Attributes
		{
			get
			{
				return this._Attributes;
			}
			set
			{
				this._Attributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_Element", Storage="_Elements", ThisKey="LinkKey", OtherKey="ParentKey")]
		public EntitySet<Element> Elements
		{
			get
			{
				return this._Elements;
			}
			set
			{
				this._Elements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Link", Storage="_Item", ThisKey="ParentKey", OtherKey="ItemKey", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Links.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Links.Add(this);
						this._ParentKey = value.ItemKey;
					}
					else
					{
						this._ParentKey = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.Link = this;
		}
		
		private void detach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.Link = null;
		}
		
		private void attach_Elements(Element entity)
		{
			this.SendPropertyChanging();
			entity.Link = this;
		}
		
		private void detach_Elements(Element entity)
		{
			this.SendPropertyChanging();
			entity.Link = null;
		}
	}
}
#pragma warning restore 1591
